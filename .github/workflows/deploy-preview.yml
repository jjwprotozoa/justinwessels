name: Deploy Preview

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Comment PR with build info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Build')
            );

            const commentBody = `## ðŸš€ Preview Build

            **Status**: âœ… Build successful
            **Branch**: \`${context.payload.pull_request.head.ref}\`
            **Commit**: \`${context.payload.pull_request.head.sha.substring(0, 7)}\`

            ### Build Details
            - **Node.js**: 20.x
            - **Build Time**: ${new Date().toISOString()}
            - **Type Check**: âœ… Passed
            - **Lint**: âœ… Passed
            - **Format**: âœ… Passed

            ### Next Steps
            - Review the changes
            - Test functionality if applicable
            - Merge when ready

            ---
            *This comment will be updated on each push to this PR.*`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
